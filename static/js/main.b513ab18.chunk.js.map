{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEMA,EACC,mCADDA,EAEE,2CAmEOC,MAhEf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA6BA,OACE,qBAAKC,UAAkC,oBAAhBF,EAAQG,MAAwBH,EAAQG,KAAKC,KAAO,EAAK,WAAsB,MAAtG,SACA,qBAAKF,UAAkC,oBAAhBF,EAAQG,MAAwBH,EAAQG,KAAKC,KAAO,EAAK,aAAwB,MAAxG,SACA,qBAAKF,UAAkC,oBAAhBF,EAAQG,MAAwBH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,MAAvG,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OAAOH,UAAU,aAAaI,YAAY,YACtDC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QAAQA,MAAOZ,EAAOa,WAlChD,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA6BW,oBAAhBlB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAf,UACA,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,QAAvD,OACA,sBAAKrB,UAAU,OAAf,cA5BY,SAACsB,GACnB,IAGIC,EAFO,CAAC,UAAW,QAAS,SAAU,eAAa,SAAU,UAAW,aAE7DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,QAAS,UAAW,QAAS,QAAS,OAAQ,QAAS,QAAS,SAAU,aAAc,UAAW,YAAa,aAK3GL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAmBJE,CAAY,IAAIC,MAAxC,UAEF,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,aAInB,aCnDEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b513ab18.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst api = {\n  key: \"4df367f4f4fc0fd6768e563f30020448\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result)\n          setQuery('')\n          console.log(result)\n        })\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    let days = [\"Domingo\", \"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\", \"Sábado\"];\n  \n    let day = days[d.getDay()]\n    let date = d.getDate()\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n    \n    return `${day} ${date} ${month} ${year}`\n  \n  }\n\n\n\n  return (\n    <div className={typeof weather.main != 'undefined' ? ((weather.main.temp < 0) ? 'app snow' : 'app') : 'app'}>\n    <div className={typeof weather.main != 'undefined' ? ((weather.main.temp > 1) ? 'app clouds' : 'app') : 'app'}>\n    <div className={typeof weather.main != 'undefined' ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Search...\" \n          onChange={e => setQuery(e.target.value)} value={query} onKeyPress= {search} />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n          <div className=\"location\">{weather.name}, {weather.sys.country} </div>\n          <div className=\"date\"> {dateBuilder(new Date())} </div>\n        </div>\n        <div className=\"weather-box\">\n          <div className=\"temp\">\n            {Math.round(weather.main.temp)}°c\n          </div>\n          <div className=\"weather\">\n            {weather.weather[0].main}\n          </div>\n        </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}